[
    {"keys": ["enter"], "command": "move", "args": {"by": "characters", "forward":true}, "context":
        [
            { "key": "following_text", "operator": "regex_contains", "operand": "^[)\\]\\>\\'\\\"\\ %>\\}\\;\\,`*]", "match_all":true},
            { "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*\\{$", "match_all":true}
        ]
    },
    {
        "keys": [
            "enter"
        ], 
        "args": {
            "contents": "\n\t${0}\n"
        }, 
        "command": "insert_snippet", 
        "context": [
            {
                // "operand": "meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml", 
                "match_all": true, 
                "key": "selector"
            }, 
            {
                "operand": false, 
                "match_all": true, 
                "key": "auto_complete_visible"
            }, 
            {
                "match_all": true, 
                "key": "clear_fields_on_enter_key"
            }, 
            {
                "operand": false, 
                "match_all": true, 
                "key": "setting.disable_formatted_linebreak"
            }
        ]
    }, 
    {
      "keys": ["tab"], 
      "command": "expand_abbreviation_by_tab", 

      // put comma-separated syntax selectors for which 
      // you want to expandEmmet abbreviations into "operand" key 
      // instead of SCOPE_SELECTOR.
      // Examples: source.js, text.html - source
      "context": [
        {
          "operand": "source.js", 
          "operator": "equal", 
          "match_all": true, 
          "key": "selector"
        }, 

        // run only if there's no selected text
        {
          "match_all": true, 
          "key": "selection_empty"
        },

        // don't work if there are active tabstops
        {
          "operator": "equal", 
          "operand": false, 
          "match_all": true, 
          "key": "has_next_field"
        }, 

        // don't work if completion popup is visible and you
        // want to insert completion with Tab. If you want to
        // expand Emmet with Tab even if popup is visible -- 
        // remove this section
        {
          "operand": false, 
          "operator": "equal", 
          "match_all": true, 
          "key": "auto_complete_visible"
        }, 
        {
          "match_all": true, 
          "key": "is_abbreviation"
        }
      ]
    },
    { "keys": ["alt+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
        [
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": ">$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^<", "match_all": true }
        ]
    },
    { "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Hua.sublime-macro"}, "context":
        [
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\[$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true }
        ]
    },
    { "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Hua2.sublime-macro"}, "context":
        [
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }
        ]
    },
    {
        "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"}
    },
    {
        "keys": ["ctrl+alt+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line jump bracket.sublime-macro"}
    },
    { "keys": ["ctrl+shift+e"], "command": "reopen_last_file" },
    {"keys":["alt+q"],"command":"toggle_side_bar"},
    {"keys": ["alt+e"], "command": "unfold_all"},
    {
        "keys": ["alt+a"],
        "command": "side_bar_open_in_browser",
        "args": {
                    "paths": [],
                    "type": "testing",
                    "browser": ""
                }
    },
    { "keys": ["alt+w"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },
    { "keys": ["ctrl+1"], "command": "fold_by_level", "args": {"level": 1} },
    { "keys": ["ctrl+2"], "command": "fold_by_level", "args": {"level": 2} },
    { "keys": ["ctrl+3"], "command": "fold_by_level", "args": {"level": 3} },
    { "keys": ["alt+`"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },
    { "keys": ["alt+r"], "command": "new_snippet" },
    { "keys": ["alt+d"], "command": "new_build_system"},
    {"keys":["f5"],"caption": "SublimeREPL: Python - RUN current file","command": "run_existing_window_command", "args":
        {
        "id": "repl_python_run",
        "file": "config/Python/Main.sublime-menu"
        }
    },
    { "keys": ["alt+shift+d"], "command": "insert_datetime"},
    { "keys": ["ctrl+shift+b"],"command": "build", "args": {"select": true} },
    { "keys": ["alt+c"],"command": "new_plugin" },
    {"keys":["alt+3"],"command":"toggle_menu"},
    { "keys": [ "ctrl+q" ], "command": "side_bar_open_in_browser"}
]